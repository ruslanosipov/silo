#!/usr/bin/env python

import collections
import curses

CURSOR = "X"
MOVEMENTS = {'h': (0, -1), 'j': (1, 0), 'k': (-1, 0), 'l': (0, 1)}
TILE_TYPES = {'wall': '#'}


class Tile(object):

    def __init__(self, tile_type):
        try:
            self.char = TILE_TYPES[tile_type]
        except KeyError:
            raise ValueError(
                    "Tried to init unknown tile type: {}".format(tile_type))


def main(stdscr):
    curses.curs_set(0)

    WINDOW_HEIGHT = curses.LINES - 6
    WINDOW_WIDTH = curses.COLS - 4
    WINDOW_Y = 3
    WINDOW_X = 2

    cursor_y = (WINDOW_HEIGHT - WINDOW_Y) / 2
    cursor_x = (WINDOW_WIDTH - WINDOW_X) / 2

    if curses.has_colors():
        curses.start_color()

    curses.init_pair(1, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_BLUE, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_BLACK, curses.COLOR_WHITE)

    stdscr.addstr("SILO LEVEL EDITOR", curses.A_REVERSE)
    stdscr.chgat(-1, curses.A_REVERSE)

    stdscr.addstr(curses.LINES - 1, 0,
            "Use 'hjkl' to move, add, Quit.")
    stdscr.chgat(curses.LINES - 1, 5, 4, curses.A_BOLD | curses.color_pair(2))
    stdscr.chgat(curses.LINES - 1, 20, 1, curses.A_BOLD | curses.color_pair(2))
    stdscr.chgat(curses.LINES - 1, 25, 1, curses.A_BOLD | curses.color_pair(1))

    container_window = curses.newwin(curses.LINES - 2, curses.COLS, 1, 0)
    main_window = container_window.subwin(
            WINDOW_HEIGHT, WINDOW_WIDTH, WINDOW_Y, WINDOW_X)
    main_window.addstr(cursor_y, cursor_x, CURSOR, curses.color_pair(3))
    container_window.box()

    stdscr.noutrefresh()
    container_window.noutrefresh()

    curses.doupdate()

    scene = collections.defaultdict(lambda: collections.defaultdict(list))

    while True:
        ch = chr(stdscr.getch())

        if ch in 'hjkl':
            dy, dx = MOVEMENTS[ch]
            cursor_y += dy
            cursor_x += dx
        elif ch == 'a':
            scene[cursor_y][cursor_x].append(Tile('wall'))
        elif ch.lower() == 'q':
            break

        main_window.clear()
        for y in scene:
            for x in scene[y]:
                if len(scene[y][x]) > 1:
                    main_window.addstr(
                            y, x, scene[y][x][-1].char, curses.color_pair(4))
                else:
                    main_window.addstr(y, x, scene[y][x][-1].char)
        main_window.addstr(cursor_y, cursor_x, CURSOR, curses.color_pair(3))

        # Refresh all windows bottom up to prevent flickering.
        stdscr.noutrefresh()
        container_window.noutrefresh()
        main_window.noutrefresh()
        curses.doupdate()

if __name__ == "__main__":
    curses.wrapper(main)
