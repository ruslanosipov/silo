#!/usr/bin/env python
"""Silo level editor.

Usage: editor <level>

Options:
    -h --help   Show this screen.
    --version   Show version.
"""

import collections
import curses

import dill
import docopt

import gsm
import tiles
import ui
import windowmanager

APPLICATION_TITLE = "SILO LEVEL EDITOR"
CURSOR = "X"

KEYS = {
    'A': ('append', True),
    'I': ('insert', True),
    'Q': ('quit', ),
    'S': ('save', ),
    'X': ('remove_mode', ),
    'a': ('append', False),
    'h': ('move_cursor', 0, -1),
    'i': ('insert', False),
    'j': ('move_cursor', 1, 0),
    'k': ('move_cursor', -1, 0),
    'l': ('move_cursor', 0, 1),
    'x': ('remove', ),
    }


def item_selection_prompt(window_manager, items):
    """Pops up a prompt which allows to select from a list of items.

    Args:
        window_manager -- windowmanager.WindowManager instance.
        items -- collections.OrderedDict, keys are to be returned,
                 values are to be displayed.

    Returns:
        None if window was dismissed, or key from `items` parameter
        for the selected item.

    Allows user to move with `j` and `k` keys, Enter to select, Escape
    or `Q`/`q` to quit.
    """
    current_line = 0
    dy = 0
    selected_item = None

    select_window_container = window_manager.main_window.subwin(
            windowmanager.WINDOW_SELECT_HEIGHT + 2,
            windowmanager.WINDOW_SELECT_WIDTH + 2,
            curses.LINES / 2 - windowmanager.WINDOW_SELECT_HEIGHT / 2 - 1,
            curses.COLS / 2 - windowmanager.WINDOW_SELECT_WIDTH / 2 - 1)
    select_window_container.box()
    select_window = select_window_container.subwin(
            windowmanager.WINDOW_SELECT_HEIGHT,
            windowmanager.WINDOW_SELECT_WIDTH,
            curses.LINES / 2 - windowmanager.WINDOW_SELECT_HEIGHT / 2,
            curses.COLS / 2 - windowmanager.WINDOW_SELECT_WIDTH / 2)
    window_manager.windows.append(select_window_container)
    window_manager.windows.append(select_window)
    window_manager.queue_redraw(select_window_container)

    while selected_item is None:
        select_window.clear()

        sublist = items.values()
        if len(items) > windowmanager.WINDOW_SELECT_HEIGHT:
            sublist = sublist[dy:windowmanager.WINDOW_SELECT_HEIGHT + dy]
            if dy == 0:
                sublist.pop()
                sublist.append('...')
            elif dy + windowmanager.WINDOW_SELECT_HEIGHT == len(items):
                sublist.pop(0)
                sublist.insert(0, '...')
            else:
                sublist.pop(0)
                sublist.pop()
                sublist.insert(0, '...')
                sublist.append('...')

        for i, value in enumerate(sublist):
            color = ui.COLOR_BLACK_ON_WHITE \
                    if i == current_line - dy else ui.COLOR_WHITE
            select_window.addstr(i, 0, value, curses.color_pair(color))

        window_manager.queue_redraw(select_window)
        window_manager.redraw_queued()

        ch = select_window.getch()
        if chr(ch) == 'j':
            if current_line == len(items) - 1:
                continue

            current_line += 1
            if dy + windowmanager.WINDOW_SELECT_HEIGHT <= current_line + 1 \
                    and dy + windowmanager.WINDOW_SELECT_HEIGHT != len(items):
                dy += 1
        elif chr(ch) == 'k':
            if current_line == 0:
                continue

            current_line -= 1
            if dy >= current_line and dy != 0:
                dy -= 1
        elif ch == 10:
            selected_item = items.keys()[current_line]
        elif chr(ch).lower() == 'q' or ch == 27:
            break

    window_manager.is_recompose_main = True
    window_manager.windows.pop()
    window_manager.windows.pop()

    return selected_item


class EditorGlobalStateManager(gsm.GlobalStateManager):
    """Manages variables and methods which must be global.

    See all the state variables in `__init__`. Important part here is
    all the `exec_*` methods, which are called dynamically from
    `main` using `KEYS` dict. Each `exec_*` method corresponds to a
    keystroke and performs some operations on the global state
    variables inside the class.
    """

    def __init__(self, window_manager, scene, save_file):
        super(EditorGlobalStateManager, self).__init__(window_manager, scene)

        self.save_file = save_file

        self.is_append_mode = False
        self.is_remove_mode = False

        self.current_tile = None

    def _set_append_mode(self):
        self.is_append_mode = True
        self.is_remove_mode = False

    def _set_remove_mode(self):
        self.is_append_mode = False
        self.is_remove_mode = True

    def _reset_modes(self):
        self.is_append_mode = False
        self.is_remove_mode = False

    def recompose_main_window(self):
        """Draw objects in the scene and queue the main window redraw."""
        main_window = self.window_manager.main_window
        main_window.clear()

        for y in self.scene:
            for x in self.scene[y]:
                color = ui.COLOR_BLACK_ON_WHITE \
                        if len(self.scene[y][x]) > 2 else ui.COLOR_WHITE
                main_window.addstr(y, x, self.scene[y][x][-1].char,
                                   curses.color_pair(color))
        if self.is_remove_mode:
            cursor_color = ui.COLOR_RED
        elif self.is_append_mode:
            cursor_color = ui.COLOR_GREEN
        else:
            cursor_color = ui.COLOR_BLUE
        main_window.addstr(self.cursor_y, self.cursor_x, CURSOR,
                           curses.color_pair(cursor_color))
        self.window_manager.queue_redraw(main_window)
        self.window_manager.is_recompose_main = False


    def exec_append(self, force_select):
        """Enter a mode to continuously add objects under cursor.

        Args:
            force_select -- Show tile select window even if
            `self.current_tile` is set.
        """
        enable_append_mode = not self.is_append_mode

        if enable_append_mode:
            if self.current_tile is None or force_select:
                tile_name = item_selection_prompt(
                        self.window_manager, tiles.TILE_TYPE_SELECT)
                if tile_name is None:
                    return
                self.current_tile = tile_name
            else:
                tile_name = self.current_tile

            self.scene[self.cursor_y][self.cursor_x].append(
                    tiles.Tile(self.current_tile))
            self._set_append_mode()

        else:
            self._reset_modes()

        status_window = self.window_manager.status_window
        status_window.clear()
        if enable_append_mode:
            status_window.addstr(0, 0, "-- APPEND --")

        self.window_manager.queue_redraw(status_window)
        self.window_manager.is_recompose_main = True

    def exec_insert(self, force_select):
        """Insert an object under cursor, prompt for tile if needed.

        Args:
            force_select -- Show tile select window even if
            `self.current_tile` is set.
        """
        if self.current_tile is None or force_select:
            tile_name = item_selection_prompt(
                    self.window_manager, tiles.TILE_TYPE_SELECT)
        else:
            tile_name = self.current_tile

        if tile_name is not None:
            self.current_tile = tile_name
            self.scene[self.cursor_y][self.cursor_x].append(
                    tiles.Tile(self.current_tile))

    def exec_move_cursor(self, dy, dx):
        """Move cursor; add or remove objects based on current mode."""
        self.cursor_y += dy
        self.cursor_x += dx
        self.window_manager.is_recompose_main = True

        if self.is_append_mode:
            self.scene[self.cursor_y][self.cursor_x].append(tiles.Tile(
                self.current_tile))

        if self.is_remove_mode:
            try:
                self.scene[self.cursor_y][self.cursor_x].pop()
            except IndexError:
                pass
            if not self.scene[self.cursor_y][self.cursor_x]:
                del self.scene[self.cursor_y][self.cursor_x]

    def exec_remove(self):
        """Remove an object under cursor."""
        try:
            self.scene[self.cursor_y][self.cursor_x].pop()
        except IndexError:
            pass
        if not self.scene[self.cursor_y][self.cursor_x]:
            del self.scene[self.cursor_y][self.cursor_x]

    def exec_remove_mode(self):
        """Enter a remove mode; remove topmost objects while moving."""
        enable_remove_mode = not self.is_remove_mode

        if enable_remove_mode:
            try:
                self.scene[self.cursor_y][self.cursor_x].pop()
            except IndexError:
                pass
            if not self.scene[self.cursor_y][self.cursor_x]:
                del self.scene[self.cursor_y][self.cursor_x]
            self._set_remove_mode()
        else:
            self._reset_modes()

        status_window = self.window_manager.status_window
        status_window.clear()
        if enable_remove_mode:
            status_window.addstr(0, 0, "-- REMOVE --")
        self.window_manager.queue_redraw(status_window)
        self.window_manager.is_recompose_main = True

    def exec_save(self):
        """Save current level."""
        with open(self.save_file, 'w') as save_file:
            dill.dump(self.scene, save_file)




def main(stdscr, save_file):
    curses.curs_set(0)

    ui.init_colors()

    window_manager = ui.create_windows(
            stdscr, "{}: {}".format(APPLICATION_TITLE, save_file))
    try:
        with open(save_file, 'r') as level_definition_file:
            scene = dill.load(level_definition_file)
    except IOError:
        scene = collections.defaultdict(lambda: collections.defaultdict(list))
    global_state_manager = EditorGlobalStateManager(
            window_manager, scene, save_file)

    global_state_manager.recompose_main_window()
    window_manager.redraw_all()

    while True:
        try:
            ch = chr(stdscr.getch())
        except ValueError:
            continue
        if ch not in KEYS:
            continue

        # See GlobalStateManager's docstring for more info on this.
        args = KEYS[ch]
        exec_method = getattr(global_state_manager, "exec_{}".format(args[0]))
        exec_method(*args[1:]) if len(args) > 1 else exec_method()

        if window_manager.is_recompose_main:
            global_state_manager.recompose_main_window()
        window_manager.redraw_queued()

if __name__ == "__main__":
    arguments = docopt.docopt(__doc__, version="Silo Level Editor v0.1")
    curses.wrapper(main, arguments['<level>'])
