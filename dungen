#!/usr/bin/env python
"""Dungeon generator.

Usage: dungen <level>

Options:
    -h --help   Show this screen.
    --version   Show version.
"""

from __future__ import print_function

import collections
import heapq
import random

import dill
import docopt

import tiles

CORRIDOR_CHANCE = 3  # Chance is 1 / CORRIDOR_CHANCE.
DUNGEON_GENERATION_ATTEMPTS = 256
LEVEL_HEIGHT = 24
LEVEL_WIDTH = 79
MAX_CORRIDOR_LENGTH = 10
MAX_DOORS_PER_ROOM = 4
MAX_ROOM_COUNT = 10
MAX_ROOM_CREATION_ATTEMPTS = 64
MAX_ROOM_HEIGHT = 8
MAX_ROOM_WIDTH = 8
MIN_CORRIDOR_LENGTH = 1
MIN_ROOM_HEIGHT = 3
MIN_ROOM_WIDTH = 3

RoomCandidate = collections.namedtuple('RoomCandidate', ['vector', 'is_corridor'])
Vector = collections.namedtuple('Vector', ['x', 'y', 'dx', 'dy'])

# TODO: Move the top right corner of the room randomly on one axis.
# TODO: Make sure rooms don't get out of given boundaries.
# TODO: Keep statistics of dungeon generation, plot them on a graph?


class Dungeon(object):

    def __init__(self, scene, rooms, corridors, loose_ends):
        self.scene = scene
        self.rooms = rooms
        self.corridors = corridors
        self.loose_ends = loose_ends


def _is_present(scene, x, y):
    return y in scene and x in scene[y]


def get_random_point(x, y, width, height):
    """Picks coordinates at one of the rectangle sides with uniform distribution.

    The idea here is to unfold a rectangle, pick a random integer on an
    unfolded perimeter, and then start folding the rectangle back (one side
    after another). It doesn't matter in what order we pick sides, as long as
    it's consistent throughout runtime (which it is).

    Args:
        x -- int
        y -- int
        width -- int, room width
        height -- int, room height

    Returns:
        An instance of Vector.
    """

    adj_width, adj_height = width - 2, height - 2  # Ignore rectangle corners here.
    p = adj_width * 2 + adj_height * 2  # Perimeter.
    random_point = random.randint(0, p - 1)

    if random_point - adj_width < 0:
        return Vector(x=x + random_point + 1, y=y, dx=0, dy=-1)
    random_point -= adj_width

    if random_point - adj_height < 0:
        return Vector(x=x, y=y + random_point + 1, dx=-1, dy=0)
    random_point -= adj_height

    if random_point - adj_width < 0:
        return Vector(x=x + random_point + 1, y=y + height - 1, dx=0, dy=1)
    random_point -= adj_width

    return Vector(x=x + width - 1, y=y + random_point + 1, dx=1, dy=0)


def get_drawing_coordinates(x, y, width, height, dx, dy):
    """Move the top-right corner of the box up/left if (dx, dy) points up/left."""

    if dx == -1:
        x -= width - 1
    elif dy == -1:
        y -= height - 1
    return (x, y)


def is_room_present(scene, x, y, width, height):
    """Check if a room is present within given rectangle, tile by tile."""

    for j in xrange(y, y + height):
        for k in xrange(x, x + width):
            if j in scene and k in scene[j]:
                return True
    return False


def are_coordinates_valid(x, y, room_width, room_height):
    """Check if coordinates are within the desired canvas."""
    return x > 0 and y > 0 and (x + room_width < LEVEL_WIDTH) and (y + room_height < LEVEL_HEIGHT)


def create_room(scene, x, y, width, height):
    """Creates a room in the scene. Does not handle collisions."""

    for j in xrange(y, y + height):
        for k in xrange(x, x + width):
            tile_name = 'floor'
            scene[j][k].append(tiles.Tile(tile_name))


def find_adjucent_room_and_add_a_door(scene, x, y, cx, cy):
    """Find rooms adjucent to the point (except for opposite of cx, cy) and make a door.

    Args:
        x -- int
        y -- int
        cx -- int, corridor direction
        cy -- int, corridor direction

    Returns:
        True if a door was added, False otherwise.
    """

    for dx, dy in ((0, 1), (0, -1), (1, 0), (-1, 0)):
        if (dx, dy) == (-cx, -cy):  # That's the direction we came from.
            continue
        if not _is_present(scene, x + dx, y + dy):
            continue
        scene[y][x].append(tiles.Tile('door'))
        return True
    return False


def tie_loose_ends(scene, loose_ends):
    """Remove empty corridors left after dungeon generation."""
    stack = []
    for le_x, le_y in loose_ends:
        for dx, dy in ((0, 2), (0, -2), (-2, 0), (0, 2)):
            if _is_present(scene, le_x + dx, le_y + dy):
                stack.append((le_x + dx, le_y + dy))
        while stack:
            x, y = stack.pop()
            count = 0
            for dx, dy in ((0, 1), (1, 0), (-1, 0), (0, -1)):
                if _is_present(scene, x + dx, y + dy):
                    stack.append((x + dx, y + dy))
                    count += 1
            if count == 1:
                del scene[y][x]
            else:
                while count:
                    stack.pop()
                    count -= 1


def generate_dungeon():
    """Generate a dungeon.

    A lot of constants at the top of the module are used for this.

    Returns:
        A Dungeon instance.
    """
    scene = collections.defaultdict(lambda: collections.defaultdict(list))

    is_first_room = True
    room_count, corridor_count = 0, 0
    x = random.randint(MAX_ROOM_WIDTH, LEVEL_WIDTH - MAX_ROOM_WIDTH)
    y = random.randint(MAX_ROOM_HEIGHT, LEVEL_HEIGHT - MAX_ROOM_HEIGHT)
    stack = [RoomCandidate(vector=Vector(x=x, y=y, dx=1, dy=0), is_corridor=False)]
    cx, cy = 0, 1  # Direction in which the end of current corridor is pointing.
    attempts = 0  # Attempts to create a current room candidate.
    loose_ends = set()  # Corridors going nowhere.

    while stack and room_count < MAX_ROOM_COUNT:
        (x, y, dx, dy), was_corridor = stack.pop()
        if _is_present(scene, x, y):
            continue
        attempts += 1

        # 1. Differently handle corridors and rooms. Corridors are more likely to spawn.
        is_corridor = random.randint(0, CORRIDOR_CHANCE) if not is_first_room else False

        if is_corridor:
            # 1.1. Generate a corridor and figure out in what direction it's pointing.
            if random.randint(0, 1):
                room_width = 1
                room_height = random.randint(MIN_CORRIDOR_LENGTH, MAX_CORRIDOR_LENGTH)
                (cx, cy) = (0, -1) if dy == -1 else (0, 1)
            else:
                room_width = random.randint(MIN_CORRIDOR_LENGTH, MAX_CORRIDOR_LENGTH)
                room_height = 1
                (cx, cy) = (-1, 0) if dx == -1 else (1, 0)
        else:
            # 1.2. Generate a room of random size.
            room_width = random.randint(MIN_ROOM_WIDTH, MAX_ROOM_WIDTH)
            room_height = random.randint(MIN_ROOM_HEIGHT, MAX_ROOM_HEIGHT)

        # 2. Get room coordinates for drawing, since room direction is determined by (dx, dy).
        nx, ny = get_drawing_coordinates(x, y, room_width, room_height, dx, dy)

        # 3. Continue if coordinates are outside of map boundaries or there's an overlap.
        if not are_coordinates_valid(nx, ny, room_width, room_height) \
                or is_room_present(scene, nx, ny, room_width, room_height):
            if attempts < MAX_ROOM_CREATION_ATTEMPTS:
                stack.append(RoomCandidate(
                    vector=Vector(x=x, y=y, dx=dx, dy=dy),
                    is_corridor=was_corridor))
            continue

        # 4. Add a door or a floor if this is not a first room created.
        if not _is_present(scene, x - dx, y - dy):
            if was_corridor and is_corridor:
                scene[y - dy][x - dx].append(tiles.Tile('floor'))
            elif not is_first_room:
                scene[y - dy][x - dx].append(tiles.Tile('door'))

        # 5. Create a room and remove current room from potential loose ends.
        create_room(scene, nx, ny, room_width, room_height)
        if (x, y) in loose_ends:
            loose_ends.remove((x, y))
        is_first_room = False

        # 6. Queue more rooms.
        if is_corridor:
            corridor_count += 1

            # Points where the corridor finished.
            nx = x + cx * room_width
            ny = y + cy * room_height

            # 6.1.a. Add a connecting door (if nothing is there) if any tiles is nearby.
            if not _is_present(scene, nx, ny):
                door_was_added = find_adjucent_room_and_add_a_door(scene, nx, ny, cx, cy)
            else:
                door_was_added = False

            # 6.1.b. Add the end of the corridor to the stack, mark it as a loose end.
            if not door_was_added:
                stack.append(RoomCandidate(
                    vector=Vector(x=nx + cx, y=ny + cy, dx=cx, dy=cy),
                    is_corridor=is_corridor))
                if not _is_present(scene, nx + cx, ny + cy):
                    loose_ends.add((nx + cx, ny + cy))
        else:
            room_count += 1

            # 6.2. Add a few potential exits from the room.
            for _ in xrange(MAX_DOORS_PER_ROOM):
                m, n, dm, dn = get_random_point(nx, ny, room_width, room_height)
                stack.append(RoomCandidate(
                    vector=Vector(x=m + 2 * dm, y=n + 2 * dn, dx=dm, dy=dn),
                    is_corridor=is_corridor))

        # 7. Null the attempts.
        attempts = 0

    return Dungeon(scene, room_count, corridor_count, loose_ends)


def main(save_file):
    dungeons = []

    for _ in xrange(DUNGEON_GENERATION_ATTEMPTS):
        dungeon = generate_dungeon()
        heapq.heappush(dungeons, (-dungeon.rooms, dungeon))  # Max priority queue, so negative pri.

    _, dungeon = heapq.heappop(dungeons)

    tie_loose_ends(dungeon.scene, dungeon.loose_ends)

    with open(save_file, 'w') as save_file_:
        dill.dump(dungeon.scene, save_file_)

if __name__ == "__main__":
    args = docopt.docopt(__doc__, version="Silo Dungeon Generator v0.1")
    main(args['<level>'])
